package com.defray.service;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.net.URLDecoder;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletResponseAware;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.context.ServletContextAware;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alipay.config.AlipayConfig;
import com.alipay.util.AlipayNotify;
import com.alipay.util.AlipaySubmit;
import com.alipay.util.UtilDate;
import com.defray.bean.ChinaBankInfoBean;
import com.defray.bean.DefrayHospitalEntity;
import com.defray.bean.DefrayRecordEntity;
import com.defray.bean.DefrayRefundRecordEntity;
import com.defray.bean.DefrayResultBean;
import com.defray.model.DefrayHospitalModel;
import com.defray.model.DefrayRecordModel;
import com.defray.model.DefrayRefundRecordModel;
import com.defray.util.HttpUtil;
import com.defray.util.HttpUtil.METHOD;
import com.defray.util.Utils;
import com.herenit.cloud.model.AppDeploy;
import com.herenit.cloud.util.RequestForwarder;
import com.opensymphony.xwork2.ActionSupport;
import com.soft.gh.domain.TOrder;
import com.soft.gh.domain.TPatient;
import com.tynet.model.GhHospital;
import com.tynet.model.HosOrder;
import com.unionpay.acp.sdk.LogUtil;
import com.unionpay.acp.sdk.SDKConstants;
import com.unionpay.acp.sdk.SDKUtil;


/**
 * union 支付处理
 * @author lcc
 *
 */
@Controller
@Scope("prototype")
public class UnionpayService extends ActionSupport implements Serializable{

	private static final long serialVersionUID = -7144524630548398608L;
	private static Logger log = LoggerFactory.getLogger(UnionpayService.class);

	@Autowired
	private DefrayRecordModel defrayRecordModel;
	@Autowired
	private DefrayHospitalModel defrayHospitalModel;
	@Autowired
	private DefrayRefundRecordModel defrayRefundRecordModel;
	
	/**
	 * 支付同步回调
	 * @return
	 * @throws Exception 
	 */
	public String frontRcvResponse() throws Exception{
		return NONE;
	}
	
	/**
	 * 支付异步回调
	 * @return
	 * @throws Exception 
	 */
	public String backRcvResponse() throws Exception {
		
		HttpServletRequest req = getRequest();
		req.setCharacterEncoding("ISO-8859-1");
		String encoding = req.getParameter(SDKConstants.param_encoding);
		// 获取请求参数中所有的信息
		Map<String, String> reqParam = getAllRequestParam(req);
		// 打印请求报文
		LogUtil.printRequestLog(reqParam);

		Map<String, String> valideData = null;
		if (null != reqParam && !reqParam.isEmpty()) {
			Iterator<Entry<String, String>> it = reqParam.entrySet().iterator();
			valideData = new HashMap<String, String>(reqParam.size());
			while (it.hasNext()) {
				Entry<String, String> e = it.next();
				String key = (String) e.getKey();
				String value = (String) e.getValue();
				value = new String(value.getBytes("ISO-8859-1"), encoding);
				valideData.put(key, value);
			}
		}

		// 验证签名
		if (!SDKUtil.validate(valideData, encoding)) {
			LogUtil.writeLog("验证签名结果[失败].");
		} else {
			System.out.println(valideData.get("orderId")); //其他字段也可用类似方式获取
			LogUtil.writeLog("验证签名结果[成功].");
		}
		return NONE;
	}
	
	/**
	 * 支付中断回调
	 * @return
	 */
	public String interruptNoticeOfAlipay(){
		return NONE;
	}
	
	/**
	 * 支付Order查询
	 * @return
	 */
	public String query(){
		return NONE;
	}
	
	/**
	 * 消费撤销
	 * @return
	 */
	public String consumeUndo(){
		return NONE;
	}
	
	/**
	 * 退款异步回调
	 * 
	 * @return
	 */
	public String asynchronousNoticeOfRefund() {
		return NONE;
	}
	
	/**
     * 获得response
     */
    private HttpServletResponse getResponse() {
        return ServletActionContext.getResponse();
    }
    
    /**
     * 获得request
     */
    private HttpServletRequest getRequest() {
        return ServletActionContext.getRequest();
    }
    
    /**
	 * 获取请求参数中所有的信息
	 * 
	 * @param request
	 * @return
	 */
	public static Map<String, String> getAllRequestParam(final HttpServletRequest request) {
		Map<String, String> res = new HashMap<String, String>();
		Enumeration<?> temp = request.getParameterNames();
		if (null != temp) {
			while (temp.hasMoreElements()) {
				String en = (String) temp.nextElement();
				String value = request.getParameter(en);
				res.put(en, value);
				//在报文上送时，如果字段的值为空，则不上送<下面的处理为在获取所有参数数据时，判断若值为空，则删除这个字段>
				//System.out.println("ServletUtil类247行  temp数据的键=="+en+"     值==="+value);
				if (null == res.get(en) || "".equals(res.get(en))) {
					res.remove(en);
				}
			}
		}
		return res;
	}
	
}
