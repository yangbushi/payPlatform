package com.tynet.action;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.alipay.config.AlipayConfig;
import com.alipay.util.AlipaySubmit;
import com.bocnet.common.security.PKCS7Tool;
import com.tynet.dao.HosOrderMapper;
import com.tynet.model.HosOrder;
import com.tynet.util.Utils;

@Controller
@Scope("prototype")
public class RefundServiceOfAlipayAction extends BaseAction2 {
	private static Logger log = LoggerFactory
			.getLogger(RefundServiceOfAlipayAction.class);
	public static String notify_url_refund = "http://115.236.176.107:8088/hr-hos-pay/notify_url_refund.do";//77.48
	/** 证书安装密码 */
	public static String keyStorePassword = "111111";
	/** 证书密码 */
	public static String keyPassword = "111111";

	@Autowired
	private HosOrderMapper hosOrderDao;

	private String orderId;
	private String resultJson;

	
	
	public String getResultJson() {
		return resultJson;
	}

	public void setResultJson(String resultJson) {
		this.resultJson = resultJson;
	}

	public String getOrderId() {
		return orderId;
	}

	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}

	public String refund(){
		if (orderId == null || StringUtils.isEmpty(orderId)) {
			resultJson = Utils.GetRetJSONString("1", "缺少orderId", null);
			return "success";
		}

		HosOrder hosOrder = hosOrderDao.selectByPrimaryKey(Long
				.valueOf(orderId));

		if (hosOrder != null) {
			if ("30".equals(hosOrder.getOrderStatus())) {
				resultJson = Utils.GetRetJSONString("1", "该订单已退号！", null);
				return "success";
			}
			log.info("orderId=" + orderId + "开始退号");
			if ("1".equals(hosOrder.getPayType())) {
				// //////////////////////////////////请求参数//////////////////////////////////////
				// 服务器异步通知页面路径
				String notify_url = notify_url_refund;//
				String seller_email = AlipayConfig.seller_email;
				Date now = new Date();
				String refund_date = Utils.sdf1.format(now);
				// 必填，格式：年[4位]-月[2位]-日[2位] 小时[2位 24小时制]:分[2位]:秒[2位]，如：2007-10-01
				// 13:13:13
				// 批次号
				String batch_no = Utils.dateFormat.format(now) + now.getTime();
				// 必填，格式：当天日期[8位]+序列号[3至24位]，如：201008010000001
				// 退款笔数
				String batch_num = "1";
				// 必填，参数detail_data的值中，“#”字符出现的数量加1，最大支持1000笔（即“#”字符出现的数量999个）
				// 退款详细数据
				if (StringUtils.isBlank(hosOrder.getTradeNo())) {
					resultJson = Utils.GetRetJSONString("1", "订单信息中付款交易号缺失！", null);
					return "success";
				}
				if (null == hosOrder.getFee()) {
					resultJson = Utils.GetRetJSONString("1", "订单信息中挂号费信息缺失！", null);
					return "success";
				}
				String detail_data = hosOrder.getTradeNo()
						+ "^"
						+ Utils.decimalFormat.format(Double.valueOf(hosOrder
								.getFee().toString())) + "^挂号费退款";
				// String detail_data = order.getTradeNo()+"^0.01^挂号费退款";
				// 必填，具体格式请参见接口技术文档
				// 把请求参数打包成数组
				Map<String, String> sParaTemp = new HashMap<String, String>();
				sParaTemp.put("service", "refund_fastpay_by_platform_nopwd");
				sParaTemp.put("partner", AlipayConfig.partner);
				sParaTemp.put("_input_charset", AlipayConfig.input_charset);
				sParaTemp.put("notify_url", notify_url);
				// sParaTemp.put("seller_email", seller_email);
				sParaTemp.put("refund_date", refund_date);
				sParaTemp.put("batch_no", batch_no);
				sParaTemp.put("batch_num", batch_num);
				sParaTemp.put("detail_data", detail_data);
				// 建立请求
				String sHtmlText = "";
				try {
					sHtmlText = AlipaySubmit.buildRequest("", "", sParaTemp);
				} catch (Exception e) {
					e.printStackTrace();
					resultJson = Utils.GetRetJSONString("0", "连接支付网关出错！", null);
					return "success";
				}

				try {
					if (StringUtils.isNotBlank(sHtmlText)) {
						Document document = DocumentHelper.parseText(sHtmlText);
						Element root = document.getRootElement();
						String is_success = root.elementText("is_success");
						if ("T".equals(is_success)) {
							// 退款成功相应的业务
							hosOrder.setOrderStatus("40");
							hosOrderDao.updateByPrimaryKey(hosOrder);
							
							resultJson = Utils.GetRetJSONString("0", "退费申请成功！", null);
							return "success";
						} else if ("F".equals(is_success)) {
							// 退款失败相应的业务
							resultJson = Utils.GetRetJSONString("1",
									"退款失败：" + root.elementText("error"), null);
							return "success";
						} else {
							resultJson = Utils.GetRetJSONString("1", "支付宝状态返回错误："
									+ is_success, null);
							return "success";
						}
					} else {
						resultJson = Utils.GetRetJSONString("1", "支付宝未返回退款结果！", null);
						return "success";
					}
				} catch (DocumentException e) {
					e.printStackTrace();
					resultJson = Utils.GetRetJSONString("1", "退款回复解析错误（XML解析错误）！",
							null);
					return "success";
				}
			} else {
				resultJson = Utils.GetRetJSONString("1", "获取原本支付方式时出错！", null);
				return "success";
			}
		} else {
			resultJson = Utils.GetRetJSONString("1", "订单不存在！", null);
			return "success";
		}
	}

	/**
	 * 生成签名,如果异常返回null
	 * 
	 * @param param
	 * @return
	 */
	public String sign(String param) {

		if (param == null) {
			return null;
		}

		try {
			String path = this.getClass().getClassLoader().getResource("/")
					.getPath();
			path = path.substring(1, path.indexOf("WEB-INF")) + "WEB-INF/";
			String keyStorePath = path + "private_key.pfx";
			// System.out.println(keyStorePath);
			log.info("keyStorePath=" + keyStorePath);
			PKCS7Tool tool = PKCS7Tool.getSigner(keyStorePath,
					keyStorePassword, keyPassword);
			return tool.sign(param.getBytes());
		} catch (GeneralSecurityException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		} catch (Exception e) {

			e.printStackTrace();
		}

		return null;
	}

}
