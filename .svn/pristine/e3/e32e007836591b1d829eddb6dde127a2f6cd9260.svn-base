package com.tynet.util;

import java.io.File;
import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author chendw
 * 
 */
public class XMLUtil {

	private static Logger logger = LoggerFactory.getLogger(XMLUtil.class);

	/**
	 * 将对象转成XML
	 * 
	 * @param object
	 * @return
	 */
	public static String bean2xml(Object object) {
		StringWriter writer = new StringWriter();
		JAXBContext context;
		try {
			context = JAXBContext.newInstance(object.getClass());
			Marshaller marshaller = context.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			marshaller.setProperty(Marshaller.JAXB_ENCODING, "utf-8");
			marshaller.marshal(object, writer);
		} catch (JAXBException e) {
			logger.error("对象转XML错误,obj={},err={}", object, e);
		}

		return writer.getBuffer().toString();
	}

	/**
	 * 将XML转成java对象
	 * 
	 * @param xml
	 * @param clazz
	 * @return
	 * @throws JAXBException 
	 */
	@SuppressWarnings("unchecked")
	public static <T> T xml2bean(String xml, Class<?> clazz) throws JAXBException {
		JAXBContext jaxbContext = JAXBContext.newInstance(clazz);
		Unmarshaller um = jaxbContext.createUnmarshaller();
		StreamSource streamSource = new StreamSource(new StringReader(xml));		
		return (T) um.unmarshal(streamSource);
	}
	
	/**
	 * 将XML转成java对象
	 * 
	 * @param xml
	 * @param clazz
	 * @return
	 * @throws JAXBException 
	 */
	@SuppressWarnings("unchecked")
	public static <T> T xml2bean(File file , Class<?> clazz) throws JAXBException {
		JAXBContext jaxbContext = JAXBContext.newInstance(clazz);
		Unmarshaller um = jaxbContext.createUnmarshaller();
		//um.setProperty(Marshaller.JAXB_ENCODING, "utf-8");
		return (T) um.unmarshal(file);
	}
	
    public static Document parseXml(String xml) throws DocumentException {
        return DocumentHelper.parseText(xml);
    }
	 
    public static String getElementByXPath(String xpath, Document document){
        return document.selectSingleNode(xpath).getText();
    }


}
