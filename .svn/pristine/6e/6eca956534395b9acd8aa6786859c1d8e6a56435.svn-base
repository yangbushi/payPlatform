<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.tynet.dao.GhDocMapper" >
  <resultMap id="BaseResultMap" type="com.tynet.model.GhDoc" >
    <id column="DOC_ID" property="docId" jdbcType="DECIMAL" />
    <result column="HOS_ID" property="hosId" jdbcType="VARCHAR" />
    <result column="DOC_NAME" property="docName" jdbcType="VARCHAR" />
    <result column="DOC_TITLE" property="docTitle" jdbcType="VARCHAR" />
    <result column="DOC_EDU" property="docEdu" jdbcType="VARCHAR" />
    <result column="INTRO" property="intro" jdbcType="VARCHAR" />
    <result column="GOODAT" property="goodat" jdbcType="VARCHAR" />
    <result column="BOOK_COUNT" property="bookCount" jdbcType="DECIMAL" />
    <result column="FAVO_COUNT" property="favoCount" jdbcType="DECIMAL" />
    <result column="PLAT_DOC_ID" property="platDocId" jdbcType="VARCHAR" />
    <result column="WEIBO" property="weibo" jdbcType="VARCHAR" />
    <result column="WEIXIN" property="weixin" jdbcType="VARCHAR" />
    <result column="SHOW_NO" property="showNo" jdbcType="DECIMAL" />
    <result column="DOC_SEX" property="docSex" jdbcType="VARCHAR" />
    <result column="PY_CODE" property="pyCode" jdbcType="VARCHAR" />
    <result column="CLINIC_TIME" property="clinicTime" jdbcType="VARCHAR" />
    <result column="DOC_JOB" property="docJob" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="hotDoctorInfoMap" type="com.tynet.model.GhDoc" >
  	<result column="doc_Id" property="docId" jdbcType="DECIMAL" />
  	<result column="hos_Name" property="hosName" jdbcType="VARCHAR" />
  	<result column="Book_Count" property="bookCount" jdbcType="VARCHAR" />
  	<result column="DOC_NAME" property="docName" jdbcType="VARCHAR" />
  	<result column="HOS_ID" property="hosId" jdbcType="VARCHAR" />
  	<result column="dept_Name" property="deptName" jdbcType="VARCHAR" />
  	<result column="dept_Id" property="deptId" jdbcType="DECIMAL" />
  </resultMap>
  
   <resultMap id="ResultDocDeptHosMap" type="com.tynet.model.DocForm" extends="BaseResultMap">
    <id column="PLAT_CODE" property="platHosCode" jdbcType="VARCHAR" />
    <result column="HOS_Name" property="hosName" jdbcType="VARCHAR" />
    <result column="PLAT_DEPT_ID" property="platDeptId" jdbcType="VARCHAR" />
    <result column="DEPT_NAME" property="deptName" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="ResultDocMap" type="com.tynet.model.DocForm" extends="BaseResultMap">
    <result column="TITLE_NAME" property="titleName" jdbcType="VARCHAR" />
    <result column="RATE_DOCTOR" property="rateDoctor" jdbcType="VARCHAR" />
    <result column="DEPT_NAME" property="deptName" jdbcType="VARCHAR" />
    <result column="PLAT_HOS_ID" property="platHosCode" jdbcType="DECIMAL" />
    <result column="HOS_ID" property="hosId" jdbcType="DECIMAL" />
    <result column="HOS_NAME" property="hosName" jdbcType="VARCHAR" />
    <result column="DEPT_ID" property="deptId" jdbcType="DECIMAL" />
	<result column="DEPT_NAME" property="deptName" jdbcType="VARCHAR" />
	<result column="COLLECT_ID" property="collectId" jdbcType="DECIMAL" />
	<result column="GOODAT" property="goodat" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    DOC_ID, HOS_ID, DOC_NAME, DOC_TITLE, DOC_EDU, INTRO, GOODAT, BOOK_COUNT, FAVO_COUNT, 
    PLAT_DOC_ID, WEIBO, WEIXIN, CLINIC_TIME, SHOW_NO
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.tynet.model.GhDocExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from GH_DOC
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.tynet.model.GhDocExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from GH_DOC
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.tynet.model.GhDocExample" >
    delete from GH_DOC
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.tynet.model.GhDocExample" resultType="java.lang.Integer" >
    select count(*) from GH_DOC
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update GH_DOC
    <set >
      <if test="record.docId != null" >
        DOC_ID = #{record.docId,jdbcType=DECIMAL},
      </if>
      <if test="record.hosId != null" >
        HOS_ID = #{record.hosId,jdbcType=VARCHAR},
      </if>
      <if test="record.docName != null" >
        DOC_NAME = #{record.docName,jdbcType=VARCHAR},
      </if>
      <if test="record.docTitle != null" >
        DOC_TITLE = #{record.docTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.docEdu != null" >
        DOC_EDU = #{record.docEdu,jdbcType=VARCHAR},
      </if>
      <if test="record.intro != null" >
        INTRO = #{record.intro,jdbcType=VARCHAR},
      </if>
      <if test="record.goodat != null" >
        GOODAT = #{record.goodat,jdbcType=VARCHAR},
      </if>
      <if test="record.bookCount != null" >
        BOOK_COUNT = #{record.bookCount,jdbcType=DECIMAL},
      </if>
      <if test="record.favoCount != null" >
        FAVO_COUNT = #{record.favoCount,jdbcType=DECIMAL},
      </if>
      <if test="record.platDocId != null" >
        PLAT_DOC_ID = #{record.platDocId,jdbcType=VARCHAR},
      </if>
      <if test="record.weibo != null" >
        WEIBO = #{record.weibo,jdbcType=VARCHAR},
      </if>
      <if test="record.weixin != null" >
        WEIXIN = #{record.weixin,jdbcType=VARCHAR},
      </if>
      <if test="record.showNo != null" >
        SHOW_NO = #{record.showNo,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update GH_DOC
    set DOC_ID = #{record.docId,jdbcType=DECIMAL},
      HOS_ID = #{record.hosId,jdbcType=VARCHAR},
      DOC_NAME = #{record.docName,jdbcType=VARCHAR},
      DOC_TITLE = #{record.docTitle,jdbcType=VARCHAR},
      DOC_EDU = #{record.docEdu,jdbcType=VARCHAR},
      INTRO = #{record.intro,jdbcType=VARCHAR},
      GOODAT = #{record.goodat,jdbcType=VARCHAR},
      BOOK_COUNT = #{record.bookCount,jdbcType=DECIMAL},
      FAVO_COUNT = #{record.favoCount,jdbcType=DECIMAL},
      PLAT_DOC_ID = #{record.platDocId,jdbcType=VARCHAR},
      WEIBO = #{record.weibo,jdbcType=VARCHAR},
      WEIXIN = #{record.weixin,jdbcType=VARCHAR},
      SHOW_NO = #{record.showNo,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from GH_DOC
    where DOC_ID = #{docId,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from GH_DOC
    where DOC_ID = #{docId,jdbcType=DECIMAL}
  </delete>
  <insert id="insert" parameterType="com.tynet.model.GhDoc" >
    insert into GH_DOC (DOC_ID, HOS_ID, DOC_NAME, 
      DOC_TITLE, DOC_EDU, INTRO, 
      GOODAT, BOOK_COUNT, FAVO_COUNT, 
      PLAT_DOC_ID, WEIBO, WEIXIN, 
      SHOW_NO)
    values (#{docId,jdbcType=DECIMAL}, #{hosId,jdbcType=VARCHAR}, #{docName,jdbcType=VARCHAR}, 
      #{docTitle,jdbcType=VARCHAR}, #{docEdu,jdbcType=VARCHAR}, #{intro,jdbcType=VARCHAR}, 
      #{goodat,jdbcType=VARCHAR}, #{bookCount,jdbcType=DECIMAL}, #{favoCount,jdbcType=DECIMAL}, 
      #{platDocId,jdbcType=VARCHAR}, #{weibo,jdbcType=VARCHAR}, #{weixin,jdbcType=VARCHAR}, 
      #{showNo,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.tynet.model.GhDoc" >
    insert into GH_DOC
    <trim prefix="(" suffix=")" suffixOverrides="," >
      DOC_ID,
      HOS_ID,
      DOC_NAME,
      DOC_TITLE,
      DOC_EDU,
      INTRO,
      GOODAT,
      BOOK_COUNT,
      FAVO_COUNT,
      PLAT_DOC_ID,
      WEIBO,
      WEIXIN,
      SHOW_NO,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{docId,jdbcType=DECIMAL},
      #{hosId,jdbcType=VARCHAR},
      #{docName,jdbcType=VARCHAR},
      #{docTitle,jdbcType=VARCHAR},
      #{docEdu,jdbcType=VARCHAR},
      #{intro,jdbcType=VARCHAR},
      #{goodat,jdbcType=VARCHAR},
      #{bookCount,jdbcType=DECIMAL},
      #{favoCount,jdbcType=DECIMAL},
      #{platDocId,jdbcType=VARCHAR},
      #{weibo,jdbcType=VARCHAR},
      #{weixin,jdbcType=VARCHAR},
      #{showNo,jdbcType=DECIMAL},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tynet.model.GhDoc" >
    update GH_DOC
    <set >
      <if test="hosId != null" >
        HOS_ID = #{hosId,jdbcType=VARCHAR},
      </if>
      <if test="docName != null" >
        DOC_NAME = #{docName,jdbcType=VARCHAR},
      </if>
      <if test="docTitle != null" >
        DOC_TITLE = #{docTitle,jdbcType=VARCHAR},
      </if>
      <if test="docEdu != null" >
        DOC_EDU = #{docEdu,jdbcType=VARCHAR},
      </if>
      <if test="intro != null" >
        INTRO = #{intro,jdbcType=VARCHAR},
      </if>
      <if test="goodat != null" >
        GOODAT = #{goodat,jdbcType=VARCHAR},
      </if>
      <if test="bookCount != null" >
        BOOK_COUNT = #{bookCount,jdbcType=DECIMAL},
      </if>
      <if test="favoCount != null" >
        FAVO_COUNT = #{favoCount,jdbcType=DECIMAL},
      </if>
      <if test="platDocId != null" >
        PLAT_DOC_ID = #{platDocId,jdbcType=VARCHAR},
      </if>
      <if test="weibo != null" >
        WEIBO = #{weibo,jdbcType=VARCHAR},
      </if>
      <if test="weixin != null" >
        WEIXIN = #{weixin,jdbcType=VARCHAR},
      </if>
      <if test="showNo != null" >
        SHOW_NO = #{showNo,jdbcType=DECIMAL},
      </if>
    </set>
    where DOC_ID = #{docId,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tynet.model.GhDoc" >
    update GH_DOC
    set HOS_ID = #{hosId,jdbcType=VARCHAR},
      DOC_NAME = #{docName,jdbcType=VARCHAR},
      DOC_TITLE = #{docTitle,jdbcType=VARCHAR},
      DOC_EDU = #{docEdu,jdbcType=VARCHAR},
      INTRO = #{intro,jdbcType=VARCHAR},
      GOODAT = #{goodat,jdbcType=VARCHAR},
      BOOK_COUNT = #{bookCount,jdbcType=DECIMAL},
      FAVO_COUNT = #{favoCount,jdbcType=DECIMAL},
      PLAT_DOC_ID = #{platDocId,jdbcType=VARCHAR},
      WEIBO = #{weibo,jdbcType=VARCHAR},
      WEIXIN = #{weixin,jdbcType=VARCHAR},
      SHOW_NO = #{showNo,jdbcType=DECIMAL}
    where DOC_ID = #{docId,jdbcType=DECIMAL}
  </update>
    <update id="updateBookCount" parameterType="java.lang.String">
      update gh_doc t set book_count=nvl(book_count,0)+1 where plat_doc_id=#{docId}
  </update>
  
  <select id="selectHosDocDept" parameterType="java.lang.String" resultMap="ResultDocDeptHosMap">
      select h.plat_code,h.hos_name,de.plat_dept_id,de.dept_name,d.plat_doc_id,d.doc_name,d.doc_title,d.doc_edu,d.intro from gh_doc d,gh_hospital h,gh_dept_doc dd,gh_dept de where 
       d.doc_id=dd.doc_id and 
       d.hos_id=h.hos_id and
       dd.dept_id=de.dept_id and d.doc_id=#{docId}
  </select>
    
  <select id="queryHotDoctor"  resultMap="hotDoctorInfoMap">
	select hos.hos_name as hos_Name,
	hos.plat_code as HOS_ID,
	dept.dept_name as dept_Name,
	dept.plat_dept_id as dept_Id,
	doc.plat_doc_id as doc_Id,
	doc.doc_name as DOC_NAME,
	doc.book_count as Book_Count
	from gh_hospital hos, GH_DEPT dept, GH_DEPT_DOC dept_doc, GH_DOC doc
	where hos.hos_id = doc.hos_id
	and hos.hos_id = dept.hos_id
	and dept.dept_id = dept_doc.dept_id
	and doc.doc_id = dept_doc.doc_id
	and rownum &lt;= 10
	order by doc.book_count desc
  </select>
    <select id="queryDocByPlatdeptid" resultMap="BaseResultMap">
	select doc.* from GH_DEPT dept, GH_DEPT_DOC dept_doc, GH_DOC doc where 
	dept.dept_id = dept_doc.dept_id
	and doc.doc_id = dept_doc.doc_id
	and dept.Plat_dept_id = #{plat_dept_id}
  </select>
  <select id="selectByPlatDocId" resultMap="ResultDocMap">
  select <include refid="Base_Column_List" />
    from GH_DOC where PLAT_DOC_ID = #{platDocId} and hos_id=#{hosId}
  </select>
    <select id="selectByPlatHosIdAndDeptNameAndDocName" resultMap="BaseResultMap">
	select doc.*
	from gh_hospital hos, gh_dept dept, gh_dept_doc dd, gh_doc doc
	where hos.hos_id = dept.hos_id
	and dept.dept_id = dd.dept_id
	and dd.doc_id = doc.doc_id
	and hos.plat_code=#{platHosId}
	and dept.dept_name=#{deptName}
	and doc.doc_name=#{docName}
  </select>
  <select id="selectDocByDeptId" parameterType="java.lang.String" resultMap="ResultDocMap">
select  t.dept_id, t.doc_id,t.doc_name,t.title_name,t.book_count,gr.rate_doctor,t.plat_doc_id,t.intro,t.plat_code plat_hos_id from      
      (select gde.dept_id, gd.doc_id,gd.doc_name,gdt.title_name,gd.book_count,gd.plat_doc_id,gd.intro,hos.plat_code from gh_doc gd,gh_dept_doc gdd,gh_dept gde,gb_doc_title gdt,gh_hospital hos where gd.doc_id=gdd.doc_id and gdd.dept_id=gde.dept_id and gd.doc_title=gdt.title_code and gd.hos_id=hos.hos_id
and gdd.dept_id=#{deptId} and gd.doc_name!='普通医生' ) t left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on t.doc_id=gr.doc_id
  </select>
  <select id="searchHosDoc" resultMap="ResultDocMap">
       select  t.dept_name, t.doc_id,t.doc_name,t.title_name,t.book_count,gr.rate_doctor,t.intro,t.plat_doc_id from      
      (select gde.dept_id,gde.dept_name,gd.plat_doc_id, gd.doc_id,gd.doc_name,gdt.title_name,gd.book_count,gd.intro from gh_doc gd,gh_dept_doc gdd,gh_dept gde,gb_doc_title gdt where gd.doc_id=gdd.doc_id and gdd.dept_id=gde.dept_id and gd.doc_title=gdt.title_code
and gd.hos_id=#{hosId}) t left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on t.doc_id=gr.doc_id  
<if test="docName != null" > where t.doc_name like concat('%',concat(#{docName},'%'))</if>
  </select>
  
  <select id="selectMyDoc" resultMap="ResultDocMap">
 select a.collect_id,a.dept_id,a.dept_name,d.goodat,d.doc_id,d.hos_id,d.doc_name,d.title_name,d.hos_name,d.plat_code plat_hos_id,d.book_count,d.rate_doctor,d.plat_doc_id from 
 (select gm.collect_id,gm.collect_content,ghdt.dept_id,ghdt.dept_name from (select collect_id, collect_content,dept_id from gh_mycollect where collect_type=#{type} and collect_patient=#{patientId}) gm left join gh_dept ghdt on gm.dept_id=ghdt.dept_id) a 
 left join 
(select c.goodat,c.doc_id,c.doc_name,c.title_name,c.book_count,c.plat_doc_id,c.rate_doctor,hos.hos_id,hos.hos_name,hos.plat_code from (select b.goodat,b.doc_id,b.hos_id,b.doc_name,b.title_name,b.book_count,b.plat_doc_id,gr.rate_doctor from (select gd.goodat,gd.doc_id,gd.hos_id,gd.doc_name,gdt.title_name,gd.book_count,gd.plat_doc_id from gh_doc gd left join gb_doc_title gdt on gd.doc_title=gdt.title_code) b left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on b.doc_id=gr.doc_id) c left join gh_hospital hos
 on c.hos_id=hos.hos_id) d on a.collect_content=d.doc_id   
  </select>
  
    <select id="selectMyDocInHosIds" resultMap="ResultDocMap">
 select a.collect_id,a.dept_id,a.dept_name,d.goodat,d.doc_id,d.hos_id,d.doc_name,d.title_name,d.hos_name,d.plat_code plat_hos_id,d.book_count,d.rate_doctor,d.plat_doc_id from 
 (select gm.collect_id,gm.collect_content,ghdt.dept_id,ghdt.dept_name from (select collect_id, collect_content,dept_id from gh_mycollect where collect_type=#{type} and collect_patient=#{patientId}) gm left join gh_dept ghdt on gm.dept_id=ghdt.dept_id) a 
 left join 
(select c.goodat,c.doc_id,c.doc_name,c.title_name,c.book_count,c.plat_doc_id,c.rate_doctor,hos.hos_id,hos.hos_name,hos.plat_code from (select b.goodat,b.doc_id,b.hos_id,b.doc_name,b.title_name,b.book_count,b.plat_doc_id,gr.rate_doctor from (select gd.goodat,gd.doc_id,gd.hos_id,gd.doc_name,gdt.title_name,gd.book_count,gd.plat_doc_id from gh_doc gd left join gb_doc_title gdt on gd.doc_title=gdt.title_code) b left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on b.doc_id=gr.doc_id) c left join gh_hospital hos
 on c.hos_id=hos.hos_id) d on a.collect_content=d.doc_id  where d.hos_id in                   
 <foreach item="item" index="index" collection="hosId" open="(" separator="," close=")">
    #{item}
 </foreach> 
  </select>
  
  <select id="selectInfo" parameterType="java.lang.String" resultMap="ResultDocMap">
select h.plat_code plat_hos_id,t.plat_doc_id,t.doc_id,t.doc_sex,t.doc_name,t.title_name,t.doc_edu,t.intro,t.weibo,t.weixin,t.book_count,gr.rate_doctor,t.clinic_time,t.doc_job,t.goodat from (select gd.hos_id,gd.plat_doc_id,gd.doc_id,gd.doc_sex,gd.doc_name,gdt.title_name,gd.doc_edu,gd.intro,gd.weibo,gd.weixin,gd.book_count,gd.clinic_time,gd.doc_job,gd.goodat from gh_doc gd left join gb_doc_title gdt on gd.doc_title=gdt.title_code
where gd.doc_id=#{docId}) t left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on t.doc_id=gr.doc_id left join gh_hospital h on t.hos_id=h.hos_id
  </select>
    <select id="selectInfoByPlatDocId" parameterType="java.lang.String" resultMap="ResultDocMap">
select h.plat_code plat_hos_id,t.plat_doc_id,t.doc_id,t.doc_sex,t.doc_name,t.title_name,t.doc_edu,t.intro,t.weibo,t.weixin,t.book_count,gr.rate_doctor,t.clinic_time,t.doc_job from (select gd.hos_id,gd.plat_doc_id,gd.doc_id,gd.doc_sex,gd.doc_name,gdt.title_name,gd.doc_edu,gd.intro,gd.weibo,gd.weixin,gd.book_count,gd.clinic_time,gd.doc_job from gh_doc gd left join gb_doc_title gdt on gd.doc_title=gdt.title_code
where gd.plat_doc_id=#{docId}) t left join (select round(avg(rate_doctor),1) rate_doctor,doc_id from gh_rate group by doc_id) gr on t.doc_id=gr.doc_id left join gh_hospital h on t.hos_id=h.hos_id
  </select>
  <select id="searchDocByKey" resultMap="ResultDocMap">
	select t.DOC_ID,
	t.HOS_ID,
	t.hos_name,
	t.doc_name,
	t.INTRO,
	b.dept_id,
	b.dept_name,
	t.py_code,
	t.plat_code as PLAT_HOS_ID,
	t.area_id,
	t.plat_doc_id
	from (select DOC_ID,
	d.HOS_ID,
	h.hos_name,
	d.doc_name,
	d.INTRO,
	d.py_code py_code,
	h.plat_code,
	h.area_id,
	d.plat_doc_id
	from GH_DOC d
	left join GH_HOSPITAL h
	on d.hos_id = h.hos_id) t
	left join (select d.dept_id, DEPT_NAME, t.doc_id
	from gh_dept_doc t
	left join gh_dept d
	on d.dept_id = t.dept_id) b
	on t.doc_id = b.doc_id
	<where>
		<if test="hosId!=null and hosId!=''">
			t.hos_id=#{hosId}
		</if>
		<if test="areaId != null and areaId !=''">
			AND t.area_id = #{areaId}
		</if>
		<if test="key!=null">
			AND replace(t.doc_name,' ','') like CONCAT(CONCAT('%', #{key}), '%') or replace(t.py_code,' ','') like
			CONCAT(CONCAT('%', #{key}), '%')
		</if>
	</where>  
  </select>
</mapper>