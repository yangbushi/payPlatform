package com.soft.gh.util;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HttpUtil {
	private static final Integer CONNECT_TIMEOUT = ConfigConst.CONNECCT_TIMEOUT;
	private static final Integer READ_TIMEOUT = ConfigConst.READ_TIMEOUT;
	private static Logger log = LoggerFactory.getLogger(HttpUtil.class);

	public static String doGet(String url, String charset) {
		String returnHTML = "";

		HttpClient httpclient = new DefaultHttpClient();

		HttpParams params = httpclient.getParams();
		HttpConnectionParams.setConnectionTimeout(params, CONNECT_TIMEOUT);
		HttpConnectionParams.setSoTimeout(params, READ_TIMEOUT);

		HttpGet httpget = new HttpGet(url);

		HttpResponse response;
		try {
			response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			returnHTML = EntityUtils.toString(entity, charset);
		} catch (ClientProtocolException e) {
			log.error(e.getMessage(), e);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		} finally {
			httpclient.getConnectionManager().shutdown();
		}

		return returnHTML;
	}

	public static String doPost(String url, String charset) {
		String returnHTML = "";

		HttpClient httpclient = new DefaultHttpClient();

		HttpParams params = httpclient.getParams();
		HttpConnectionParams.setConnectionTimeout(params, CONNECT_TIMEOUT);
		HttpConnectionParams.setSoTimeout(params, READ_TIMEOUT);

		HttpPost httpget = new HttpPost(url);

		HttpResponse response;
		try {
			response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			returnHTML = EntityUtils.toString(entity, charset);
		} catch (ClientProtocolException e) {
			log.error(e.getMessage(), e);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		} finally {
			httpclient.getConnectionManager().shutdown();
		}

		return returnHTML;
	}
	
    public static String doGet(String url, String charset,Map<String, String> parameters) throws IOException {
        String returnHTML = "";
        String args = "";
        for (Iterator ite = parameters.entrySet().iterator(); ite.hasNext();) {
            Map.Entry<String, String> entry = (Map.Entry<String, String>) ite.next();
            args += entry.getKey() + "=" + entry.getValue() + "&";
        }
        if(args!=null && args.length() > 0 ){
            args = args.substring(0,args.length() -1);
            url += "?"+ args;
        }
        HttpClient httpclient = new DefaultHttpClient();

        HttpParams params = httpclient.getParams();
        HttpConnectionParams.setConnectionTimeout(params, CONNECT_TIMEOUT);
        HttpConnectionParams.setSoTimeout(params, READ_TIMEOUT);

        HttpGet httpget = new HttpGet(url);

        HttpResponse response = httpclient.execute(httpget);

        HttpEntity entity = response.getEntity();
        returnHTML = EntityUtils.toString(entity, charset);

        httpclient.getConnectionManager().shutdown();

        return returnHTML;
    }

	public static String doPost(String url, String charset,
			Map<String, String> parameters) {
		List<NameValuePair> urlParams = new ArrayList<NameValuePair>();
		for (Iterator ite = parameters.entrySet().iterator(); ite.hasNext();) {
			Map.Entry<String, String> entry = (Map.Entry<String, String>) ite
					.next();
			urlParams.add(new BasicNameValuePair(entry.getKey(), entry
					.getValue()));
		}

		String returnHTML = "";

		HttpClient httpclient = new DefaultHttpClient();

		HttpParams params = httpclient.getParams();
		HttpConnectionParams.setConnectionTimeout(params, CONNECT_TIMEOUT);
		HttpConnectionParams.setSoTimeout(params, READ_TIMEOUT);

		HttpPost httpget = new HttpPost(url);
		try {
			httpget.setEntity(new UrlEncodedFormEntity(urlParams, charset));
			HttpResponse response = httpclient.execute(httpget);

			HttpEntity entity = response.getEntity();
			returnHTML = EntityUtils.toString(entity, charset);

		} catch (UnsupportedEncodingException e) {
			log.error(e.getMessage(), e);
		} catch (ClientProtocolException e) {
			log.error(e.getMessage(), e);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		} finally {
			httpclient.getConnectionManager().shutdown();
		}

		return returnHTML;
	}
}
