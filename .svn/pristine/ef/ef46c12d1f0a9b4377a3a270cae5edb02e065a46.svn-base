package com.base.commons.utils;

import java.io.UnsupportedEncodingException;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

public class StringUtil extends org.apache.commons.lang3.StringUtils {

    private static Logger logger = Logger.getLogger(StringUtil.class);

    /**
     * 字符串左边补充“0”
     *
     * @param str
     *            待补充的字符串
     * @param strLength
     *            最终长度
     * @param padChar
     *            补充的字符串
     * @return
     */
    public static String leftPad(String str, int strLength) {
        return leftPad(str, strLength, '0');
    }

    /**
     * 字符串左边补充
     *
     * @param str
     *            待补充的字符串
     * @param strLength
     *            最终长度
     * @param padChar
     *            补充的字符串
     * @return
     */
    public static String leftPad(String str, int strLength, char padChar) {
        int strLen = StringUtil.getGBLen(str);
        if (strLen < strLength) {
            while (strLen < strLength) {
                StringBuffer sb = new StringBuffer();
                sb.append(padChar).append(str);
                str = sb.toString();
                strLen = StringUtil.getGBLen(str);
            }
        }
        return str;
    }

    /**
     * 字符串右边补充“0”
     *
     * @param str
     *            待补充的字符串
     * @param strLength
     *            最终长度
     * @param padChar
     *            补充的字符串
     * @return
     */
    public static String rightPad(String str, int strLength) {
        return rightPad(str, strLength, '0');
    }

    /**
     * 字符串右边补充
     *
     * @param str
     *            待补充的字符串
     * @param strLength
     *            最终长度
     * @param padChar
     *            补充的字符串
     * @return
     */
    public static String rightPad(String str, int strLength, char padChar) {
        int strLen = str.length();
        if (strLen < strLength) {
            while (strLen < strLength) {
                StringBuffer sb = new StringBuffer();
                sb.append(str).append("0");
                str = sb.toString();
                strLen = str.length();
            }
        }
        return str;
    }

    /**
     * 返回gb2312编码的长度，即一个中文占2个字节。
     *
     * @param str
     * @return
     * @throws UnsupportedEncodingException
     */
    public static int getGBLen(String str) {

        return getLen(str, "gb18030");

    }

    /**
     * 返回utf-8编码的长度，即一个中文占3个字节。
     *
     * @param str
     * @return
     * @throws UnsupportedEncodingException
     */
    public static int getUTF8Len(String str) {

        return getLen(str, "utf-8");

    }

    /**
     * 获取字符串长度，null返回0
     *
     * @param str
     * @return
     */
    public static int getLen(String str, String charset) {
        if (str == null) {
            return 0;
        }

        try {
            return str.getBytes(charset).length;
        } catch (UnsupportedEncodingException e) {
            logger.error(e.getMessage(), e);
        }
        return 0;
    }

    /**
     * 获取字符串长度，null返回0
     *
     * @param str
     * @return
     */
    public static int getLen(String str) {
        return getLen(str, DefaultConfConst.CHARSET);
    }

    public static String bytesToHexString(byte[] src) {

        StringBuilder stringBuilder = new StringBuilder("");
        if (src == null || src.length <= 0) {
            return null;
        }
        for (int i = 0; i < src.length; i++) {
            int v = src[i] & 0xFF;
            String hv = Integer.toHexString(v);
            if (hv.length() < 2) {
                stringBuilder.append(0);
            }
            stringBuilder.append(hv);
        }
        return stringBuilder.toString().toUpperCase();
    }

    public static byte[] hexStringToBytes(String hexString) {
        if (hexString == null || hexString.equals("")) {
            return null;
        }
        hexString = hexString.toUpperCase();
        int length = hexString.length() / 2;
        char[] hexChars = hexString.toCharArray();
        byte[] d = new byte[length];
        for (int i = 0; i < length; i++) {
            int pos = i * 2;
            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
        }
        return d;
    }

    private static byte charToByte(char c) {
        return (byte) "0123456789ABCDEF".indexOf(c);
    }

    /**
     * 将指定字符串src，以每两个字符分割转换为16进制形式 如："2B44EFD9" --> byte[]{0x2B, 0x44, 0xEF,
     * 0xD9} UTF-8编码
     *
     * @param src
     *            String
     * @return byte[]
     */
    public static byte[] HexString2Bytes(String src) {
        return HexString2Bytes(src,"utf-8");
    }

    /**
     * 将指定字符串src，以每两个字符分割转换为16进制形式 如："2B44EFD9" --> byte[]{0x2B, 0x44, 0xEF,
     * 0xD9}
     *
     * @param src
     *            String
     * @return byte[]
     */
    public static byte[] HexString2Bytes(String src, String charset) {
        int len = src.length() / 2;
        byte[] ret = new byte[len];
        byte[] tmp;
        try {
            tmp = src.getBytes(charset);
            for (int i = 0; i < len; i++) {
                ret[i] = uniteBytes(tmp[i * 2], tmp[i * 2 + 1]);
            }
        } catch (UnsupportedEncodingException e) {
            logger.error(e.getMessage());
        }

        return ret;
    }

    /**
     * 将两个ASCII字符合成一个字节； 如："EF"--> 0xEF
     *
     * @param src0
     *            byte
     * @param src1
     *            byte
     * @return byte
     */
    public static byte uniteBytes(byte src0, byte src1) {
        byte _b0 = Byte.decode("0x" + new String(new byte[] { src0 })).byteValue();
        _b0 = (byte) (_b0 << 4);
        byte _b1 = Byte.decode("0x" + new String(new byte[] { src1 })).byteValue();
        byte ret = (byte) (_b0 ^ _b1);
        return ret;
    }

    /**
     * 生成随即密码带字符
     *
     * @param pwd_len
     *            生成的密码的总长度
     * @return 密码的字符串
     */
    public static String genRandomStr(int pwd_len) {
        // 35是因为数组是从0开始的，26个字母+10个数字
        final int maxNum = 36;
        int i; // 生成的随机数
        int count = 0; // 生成的密码的长度

        char[] str = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
                'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
                'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

        //char[] str = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
        StringBuffer pwd = new StringBuffer("");
        Random r = new Random();
        while (count < pwd_len) {
            // 生成随机数，取绝对值，防止生成负数，

            i = Math.abs(r.nextInt(maxNum)); // 生成的数最大为36-1

            if (i >= 0 && i < str.length) {
                pwd.append(str[i]);
                count++;
            }
        }

        return pwd.toString();
    }

    /**
     * 获取字符串的内容 null 返回""
     * @param str
     * @return
     */
    public static String getStringText(String str){
        return str == null ? "" : str;
    }

    /**
     * 按字节截取字符串
     *
     * @param orignal
     *            原始字符串
     * @param count
     *            截取位数
     * @return 截取后的字符串
     * @throws UnsupportedEncodingException
     *             使用了JAVA不支持的编码格式
     */
    public static String substring(String orignal,int idx, int count){
        // 原始字符不为null，也不是空字符串
        if (orignal != null && !"".equals(orignal)) {
            // 将原始字符串转换为GBK编码格式
            //orignal = new String(orignal.getBytes(), "GBK");
            // 要截取的字节数大于0，且小于原始字符串的字节数
            int pos = 0;
            try {
                if (count > 0 && count <= orignal.getBytes("GBK").length) {
                    StringBuffer buff = new StringBuffer();
                    char c;
                    for (int i = 0; i < count ; i++) {
                        pos++;
                        c = orignal.charAt(i);
                        if(pos > idx){
                            buff.append(c);
                        }

                        if (isChineseChar(c)) {
                            // 遇到中文汉字，截取字节总数减1
                            --count;
                            pos++;
                        }
                    }
                    return buff.toString();
                }
            } catch (UnsupportedEncodingException e) {
                logger.error(new StringBuffer().append("字符串截取错误[").append(e.getMessage()).append("]"));
            }
        }

        return orignal;
    }

    /**
     * 判断是否是一个中文汉字
     *
     * @param c
     *            字符
     * @return true表示是中文汉字，false表示是英文字母
     * @throws UnsupportedEncodingException
     *             使用了JAVA不支持的编码格式
     */
    public static boolean isChineseChar(char c)
            throws UnsupportedEncodingException {
        // 如果字节数大于1，是汉字
        // 以这种方式区别英文字母和中文汉字并不是十分严谨，但在这个题目中，这样判断已经足够了
        return String.valueOf(c).getBytes().length > 1;
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
        for (int i = 0; i < 5; i++) {
            System.out.println(StringUtil.genRandomStr(6));
        }


    }
    
    public static String delHTMLTag(String htmlStr) {
		if (isNotBlank(htmlStr)) {
			String regEx_script = "<script[^>]*?>[\\s\\S]*?<\\/script>"; // 定义script的正则表达式
			String regEx_style = "<style[^>]*?>[\\s\\S]*?<\\/style>"; // 定义style的正则表达式
			String regEx_html = "<[^>]+>"; // 定义HTML标签的正则表达式

			Pattern p_script = Pattern.compile(regEx_script, Pattern.CASE_INSENSITIVE);
			Matcher m_script = p_script.matcher(htmlStr);
			htmlStr = m_script.replaceAll(""); // 过滤script标签

			Pattern p_style = Pattern.compile(regEx_style, Pattern.CASE_INSENSITIVE);
			Matcher m_style = p_style.matcher(htmlStr);
			htmlStr = m_style.replaceAll(""); // 过滤style标签

			Pattern p_html = Pattern.compile(regEx_html, Pattern.CASE_INSENSITIVE);
			Matcher m_html = p_html.matcher(htmlStr);
			htmlStr = m_html.replaceAll(""); // 过滤html标签
			return htmlStr.trim(); // 返回文本字符串
		} else {
			return htmlStr;
		}
	}
}
