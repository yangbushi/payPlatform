package com.herenit.cloud.util;

import java.beans.Introspector;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Set;

import org.springframework.beans.factory.BeanNameAware;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
import org.springframework.core.type.classreading.MetadataReader;
import org.springframework.core.type.classreading.MetadataReaderFactory;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import org.springframework.core.type.filter.TypeFilter;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.StringUtils;

import com.herenit.cloud.bean.RestfulBean;

public class RestfulScanner implements BeanFactoryPostProcessor,
		InitializingBean, ApplicationContextAware, BeanNameAware {

	private String basePackage;

	private Class<? extends Annotation> annotationClass;

	private ApplicationContext applicationContext;

	private String beanName;

	public void setBasePackage(String basePackage) {
		this.basePackage = basePackage;
	}

	public void setAnnotationClass(Class<? extends Annotation> annotationClass) {
		this.annotationClass = annotationClass;
	}

	/**
	 * {@inheritDoc}
	 */
	public void setApplicationContext(ApplicationContext applicationContext) {
		this.applicationContext = applicationContext;
	}

	/**
	 * {@inheritDoc}
	 */
	public void setBeanName(String name) {
		this.beanName = name;
	}

	/**
	 * {@inheritDoc}
	 */
	public void afterPropertiesSet() throws Exception {
		Assert.notNull(this.basePackage, "Property 'basePackage' is required");
	}

	/**
	 * {@inheritDoc}
	 */
	public void postProcessBeanFactory(
			ConfigurableListableBeanFactory beanFactory) {

		Scanner scanner = new Scanner();
		scanner.setResourceLoader(this.applicationContext);

		scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage,
				ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));
	}

	private final class Scanner extends
			ClassPathScanningCandidateComponentProvider {

		public Scanner() {
			super(true);
		}

		/**
		 * Configures parent scanner to search for the right interfaces. It can
		 * search for all interfaces or just for those that extends a
		 * markerInterface or/and those annotated with the annotationClass
		 */
		@Override
		protected void registerDefaultFilters() {
			boolean acceptAllInterfaces = true;

			// if specified, use the given annotation and / or marker interface
			if (RestfulScanner.this.annotationClass != null) {
				addIncludeFilter(new AnnotationTypeFilter(
						RestfulScanner.this.annotationClass));
				acceptAllInterfaces = false;
			}

			if (acceptAllInterfaces) {
				// default include filter that accepts all classes
				addIncludeFilter(new TypeFilter() {
					public boolean match(MetadataReader metadataReader,
							MetadataReaderFactory metadataReaderFactory)
							throws IOException {
						return true;
					}
				});
			}

			// exclude package-info.java
			addExcludeFilter(new TypeFilter() {
				public boolean match(MetadataReader metadataReader,
						MetadataReaderFactory metadataReaderFactory)
						throws IOException {
					String className = metadataReader.getClassMetadata()
							.getClassName();
					return className.endsWith("package-info");
				}
			});
		}

		/**
		 * Calls the parent search that will search all the candidates. Then the
		 * put objects to cache
		 */
		protected void scan(String... basePackages) {

			Assert.notEmpty(basePackages,
					"At least one base package must be specified");
			for (String basePackage : basePackages) {
				Set<BeanDefinition> candidates = findCandidateComponents(basePackage);
				for (BeanDefinition candidate : candidates) {
					String shortClassName = ClassUtils.getShortName(candidate
							.getBeanClassName());
					String beanName = Introspector.decapitalize(shortClassName);
					Class<?> obj = applicationContext.getType(beanName);
					Method[] methods = obj.getDeclaredMethods();
					for (Method method : methods) {
						if (method.isAnnotationPresent(annotationClass)) {
							Annotation anno = method
									.getAnnotation(annotationClass);
							RestfulBean.beanCache
									.put(anno.toString(), new RestfulBean(
											beanName, method.getName()));

							if (logger.isDebugEnabled()) {
								logger.debug("Cached Service '"+beanName+"' Method '"
										+ method.getName() + "' with key '"
										+ anno.toString() + "'");
							}
						}
					}
				}
			}
			// for(String key : RestfulBean.beanCache.keySet()){
			// System.out.println("key="+key+","+RestfulBean.beanCache.get(key));
			// }
		}
	}

	public String getBasePackage() {
		return basePackage;
	}

	public Class<? extends Annotation> getAnnotationClass() {
		return annotationClass;
	}

	public ApplicationContext getApplicationContext() {
		return applicationContext;
	}

	public String getBeanName() {
		return beanName;
	}

}
