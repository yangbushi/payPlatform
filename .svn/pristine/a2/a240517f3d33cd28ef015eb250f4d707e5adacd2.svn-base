package com.herenit.cloud.model;

import java.util.ArrayList;
import java.util.List;

public class AppFunctionExample {
    protected String orderByClause;
	protected boolean distinct;
	protected List<Criteria> oredCriteria;

	public AppFunctionExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	public String getOrderByClause() {
		return orderByClause;
	}

	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	public boolean isDistinct() {
		return distinct;
	}

	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andFuncodeIsNull() {
			addCriterion("FUNCODE is null");
			return (Criteria) this;
		}

		public Criteria andFuncodeIsNotNull() {
			addCriterion("FUNCODE is not null");
			return (Criteria) this;
		}

		public Criteria andFuncodeEqualTo(String value) {
			addCriterion("FUNCODE =", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeNotEqualTo(String value) {
			addCriterion("FUNCODE <>", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeGreaterThan(String value) {
			addCriterion("FUNCODE >", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeGreaterThanOrEqualTo(String value) {
			addCriterion("FUNCODE >=", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeLessThan(String value) {
			addCriterion("FUNCODE <", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeLessThanOrEqualTo(String value) {
			addCriterion("FUNCODE <=", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeLike(String value) {
			addCriterion("FUNCODE like", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeNotLike(String value) {
			addCriterion("FUNCODE not like", value, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeIn(List<String> values) {
			addCriterion("FUNCODE in", values, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeNotIn(List<String> values) {
			addCriterion("FUNCODE not in", values, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeBetween(String value1, String value2) {
			addCriterion("FUNCODE between", value1, value2, "funcode");
			return (Criteria) this;
		}

		public Criteria andFuncodeNotBetween(String value1, String value2) {
			addCriterion("FUNCODE not between", value1, value2, "funcode");
			return (Criteria) this;
		}

		public Criteria andFunnameIsNull() {
			addCriterion("FUNNAME is null");
			return (Criteria) this;
		}

		public Criteria andFunnameIsNotNull() {
			addCriterion("FUNNAME is not null");
			return (Criteria) this;
		}

		public Criteria andFunnameEqualTo(String value) {
			addCriterion("FUNNAME =", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameNotEqualTo(String value) {
			addCriterion("FUNNAME <>", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameGreaterThan(String value) {
			addCriterion("FUNNAME >", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameGreaterThanOrEqualTo(String value) {
			addCriterion("FUNNAME >=", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameLessThan(String value) {
			addCriterion("FUNNAME <", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameLessThanOrEqualTo(String value) {
			addCriterion("FUNNAME <=", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameLike(String value) {
			addCriterion("FUNNAME like", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameNotLike(String value) {
			addCriterion("FUNNAME not like", value, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameIn(List<String> values) {
			addCriterion("FUNNAME in", values, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameNotIn(List<String> values) {
			addCriterion("FUNNAME not in", values, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameBetween(String value1, String value2) {
			addCriterion("FUNNAME between", value1, value2, "funname");
			return (Criteria) this;
		}

		public Criteria andFunnameNotBetween(String value1, String value2) {
			addCriterion("FUNNAME not between", value1, value2, "funname");
			return (Criteria) this;
		}

		public Criteria andDescriptionIsNull() {
			addCriterion("DESCRIPTION is null");
			return (Criteria) this;
		}

		public Criteria andDescriptionIsNotNull() {
			addCriterion("DESCRIPTION is not null");
			return (Criteria) this;
		}

		public Criteria andDescriptionEqualTo(String value) {
			addCriterion("DESCRIPTION =", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotEqualTo(String value) {
			addCriterion("DESCRIPTION <>", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionGreaterThan(String value) {
			addCriterion("DESCRIPTION >", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionGreaterThanOrEqualTo(String value) {
			addCriterion("DESCRIPTION >=", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLessThan(String value) {
			addCriterion("DESCRIPTION <", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLessThanOrEqualTo(String value) {
			addCriterion("DESCRIPTION <=", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLike(String value) {
			addCriterion("DESCRIPTION like", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotLike(String value) {
			addCriterion("DESCRIPTION not like", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionIn(List<String> values) {
			addCriterion("DESCRIPTION in", values, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotIn(List<String> values) {
			addCriterion("DESCRIPTION not in", values, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionBetween(String value1, String value2) {
			addCriterion("DESCRIPTION between", value1, value2, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotBetween(String value1, String value2) {
			addCriterion("DESCRIPTION not between", value1, value2,
					"description");
			return (Criteria) this;
		}

		public Criteria andImplTypeIsNull() {
			addCriterion("IMPL_TYPE is null");
			return (Criteria) this;
		}

		public Criteria andImplTypeIsNotNull() {
			addCriterion("IMPL_TYPE is not null");
			return (Criteria) this;
		}

		public Criteria andImplTypeEqualTo(String value) {
			addCriterion("IMPL_TYPE =", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeNotEqualTo(String value) {
			addCriterion("IMPL_TYPE <>", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeGreaterThan(String value) {
			addCriterion("IMPL_TYPE >", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeGreaterThanOrEqualTo(String value) {
			addCriterion("IMPL_TYPE >=", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeLessThan(String value) {
			addCriterion("IMPL_TYPE <", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeLessThanOrEqualTo(String value) {
			addCriterion("IMPL_TYPE <=", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeLike(String value) {
			addCriterion("IMPL_TYPE like", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeNotLike(String value) {
			addCriterion("IMPL_TYPE not like", value, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeIn(List<String> values) {
			addCriterion("IMPL_TYPE in", values, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeNotIn(List<String> values) {
			addCriterion("IMPL_TYPE not in", values, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeBetween(String value1, String value2) {
			addCriterion("IMPL_TYPE between", value1, value2, "implType");
			return (Criteria) this;
		}

		public Criteria andImplTypeNotBetween(String value1, String value2) {
			addCriterion("IMPL_TYPE not between", value1, value2, "implType");
			return (Criteria) this;
		}
	}

	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue,
				String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table APP_FUNCTION
     *
     * @mbggenerated do_not_delete_during_merge Tue Dec 02 15:32:11 CST 2014
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}