package com.tynet.action;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.bocnet.common.security.PKCS7Tool;
import com.soft.gh.dao.TOrderMapper;
import com.soft.gh.domain.TOrder;
import com.tynet.bean.PayChinaBankBean;
import com.tynet.dao.HosOrderMapper;
import com.tynet.model.HosOrder;
import com.tynet.service.RefundService;
import com.tynet.util.Utils;


@Controller
@Scope("prototype")
public class PayOfChinaBankAction extends BaseAction2 {
	@Autowired
	private HosOrderMapper hosOrderDao;
	private static Logger log = LoggerFactory.getLogger(PayOfChinaBankAction.class);
	private static final long serialVersionUID = -6287879347497083310L;
	/** 这里的orderId是数据库表结构中的平台订单ID*/
	private String orderId;
	private String message;
	
	private	PayChinaBankBean payChinaBankBean;
	/** 证书路径*/
	public static String keyStorePath = "";//D:\\doc\\key\\private_key.pfx
	/** 根证书路径 */
	public static String rootCertificatePath = "";//D:\\doc\\key\\root_key.cer
	
	public String payChinaBank(){
		if (StringUtils.isBlank(orderId)) {
			log.info("###订单ID为空###");
			message="订单编号为空！";
			return "failure";
		}
		HosOrder hosOrder = hosOrderDao.selectByPrimaryKey(Long.valueOf(orderId));
		if (hosOrder==null) {
			log.info("###查询订单失败###");
			message="查询不到此订单！";
			return "failure";
		}
		String path=this.getClass().getClassLoader().getResource("/").getPath();
		path=path.substring(1, path.indexOf("WEB-INF"))+"WEB-INF/";
		keyStorePath=path+"private_key.pfx";
		rootCertificatePath=path+"root_key.cer";
		payChinaBankBean=new PayChinaBankBean();
		payChinaBankBean.setCurCode("001");
		payChinaBankBean.setMerchantNo("104110059475555");
		payChinaBankBean.setOrderAmount(Utils.decimalFormat.format(Double.valueOf("0.01")));//tOrder.getTotalFee() 测试用0.01
		
		payChinaBankBean.setOrderNo(hosOrder.getOrderId().toString());
		
		payChinaBankBean.setOrderNote("挂号费");
		payChinaBankBean.setOrderTime(Utils.sdf2.format(hosOrder.getCreateTime()));
		payChinaBankBean.setOrderTimeoutDate(Utils.sdf2.format(new Date(hosOrder.getCreateTime().getTime()+1000*60*30)));
		//payChinaBankBean.setOrderUrl("http://121.40.57.103:9092/hr-hos-pay/callbackOfChinaBank.do");//301
		payChinaBankBean.setOrderUrl("http://115.236.176.107:8088/hr-hos-pay/callbackOfChinaBank.do");//77.48   
		payChinaBankBean.setPayType("1");
		payChinaBankBean.setSpMobile("");
		String param=payChinaBankBean.getOrderNo()+"|"+payChinaBankBean.getOrderTime()+"|"+payChinaBankBean.getCurCode()+"|"+payChinaBankBean.getOrderAmount()+"|"+payChinaBankBean.getMerchantNo();
		log.info("###支付时签名param:###"+param);
		String paramAfterSign=sign(param);
		if (StringUtils.isBlank(paramAfterSign)) {
			log.info("###支付时签名错误###");
			message="支付时签名错误！";
			return "failure";
		}
		payChinaBankBean.setSignData(paramAfterSign);
		return "success";
	}
	/**
	 *  生成签名,如果异常返回null
	 * @param param
	 * @return
	 */
	public static String sign(String param) {

		if(param==null)
		{
			return null;
		}
		
		try {
			log.info("###支付时签名sign tool:###"+keyStorePath+"|"+RefundService.keyStorePassword+"|"+RefundService.keyPassword);
			PKCS7Tool tool = PKCS7Tool.getSigner(keyStorePath,
					RefundService.keyStorePassword,
					RefundService.keyPassword);
			return tool.sign(param.getBytes());
		} catch (GeneralSecurityException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		} catch (Exception e) {

			e.printStackTrace();
		}

		return null;
	}
	/**
	 * 校验签名是否有效
	 * @param signature 返回的签名
	 * @param param     返回的参数
	 * @param dn        证书dn,为空则不校验dn
	 * @return
	 */
	public static boolean verifySign(String signature, String param, String dn)
	{
		
		if(signature == null || param == null)
		{
			return false;
		}
		try {
			PKCS7Tool vTool = PKCS7Tool.getVerifier(rootCertificatePath);
			vTool.verify(signature, param.getBytes(), dn);
			return true; // 校验成功
		} catch (GeneralSecurityException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return false;
		
	}
	public String getOrderId() {
		return orderId;
	}


	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
	public PayChinaBankBean getPayChinaBankBean() {
		return payChinaBankBean;
	}
	public void setPayChinaBankBean(PayChinaBankBean payChinaBankBean) {
		this.payChinaBankBean = payChinaBankBean;
	}
}
