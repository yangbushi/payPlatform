package com.defray.action;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.alipay.config.AlipayConfig;
import com.alipay.util.AlipaySubmit;
import com.bocnet.common.security.PKCS7Tool;
import com.defray.bean.AlipayInfoBean;
import com.defray.bean.ChinaBankInfoBean;
import com.defray.service.AlipayService;
import com.defray.util.Utils;
import com.opensymphony.xwork2.ActionSupport;
import com.tynet.service.RefundService;

@Controller
@Scope("prototype")
public class RefundAction extends ActionSupport {

	private static Logger log = LoggerFactory.getLogger(RefundAction.class);

	private String resultJson;
	// 交易号
	private String tradeNo;
	// 费用
	private String orderFee;
	// 支付方式
	private String defrayType;

	public static String notify_url_refund = "http://115.236.176.107:8088/hr-hos-pay/asynchronousNoticeOfRefund.do";// 77.48

	/**
	 * 退款
	 * 
	 * @return
	 */
	public String refund() {
		if (StringUtils.isBlank(tradeNo)) {
			resultJson = Utils.GetRetJSONString("1", "tradeNo为空", null);
			return "success";
		}

		if (StringUtils.isBlank(orderFee)) {
			resultJson = Utils.GetRetJSONString("1", "orderFee为空", null);
			return "success";
		}

		if (StringUtils.isBlank(defrayType)) {
			resultJson = Utils.GetRetJSONString("1", "defrayType为空", null);
			return "success";
		}
		if ("1".equals(defrayType)) {
			// //////////////////////////////////请求参数//////////////////////////////////////
			// 服务器异步通知页面路径
			String notify_url = notify_url_refund;//
			String seller_email = AlipayConfig.seller_email;
			Date now = new Date();
			String refund_date = Utils.sdf1.format(now);
			// 必填，格式：年[4位]-月[2位]-日[2位] 小时[2位 24小时制]:分[2位]:秒[2位]，如：2007-10-01
			// 13:13:13
			// 批次号
			String batch_no = Utils.dateFormat.format(now) + now.getTime();
			// 必填，格式：当天日期[8位]+序列号[3至24位]，如：201008010000001
			// 退款笔数
			String batch_num = "1";
			// 必填，参数detail_data的值中，“#”字符出现的数量加1，最大支持1000笔（即“#”字符出现的数量999个）
			// 退款详细数据
			String detail_data = tradeNo
					+ "^"
					+ Utils.decimalFormat.format(Double.valueOf(orderFee
							.toString())) + "^挂号费退款";
			// String detail_data = order.getTradeNo()+"^0.01^挂号费退款";
			// 必填，具体格式请参见接口技术文档
			// 把请求参数打包成数组
			Map<String, String> sParaTemp = new HashMap<String, String>();
			sParaTemp.put("service", "refund_fastpay_by_platform_nopwd");
			sParaTemp.put("partner", AlipayConfig.partner);
			sParaTemp.put("_input_charset", AlipayConfig.input_charset);
			sParaTemp.put("notify_url", notify_url);
			// sParaTemp.put("seller_email", seller_email);
			sParaTemp.put("refund_date", refund_date);
			sParaTemp.put("batch_no", batch_no);
			sParaTemp.put("batch_num", batch_num);
			sParaTemp.put("detail_data", detail_data);
			// 建立请求
			String sHtmlText = "";
			try {
				sHtmlText = AlipaySubmit.buildRequest("", "", sParaTemp);
			} catch (Exception e) {
				e.printStackTrace();
				resultJson = Utils.GetRetJSONString("0", "连接支付网关出错！", null);
				return "success";
			}

			try {
				if (StringUtils.isNotBlank(sHtmlText)) {
					Document document = DocumentHelper.parseText(sHtmlText);
					Element root = document.getRootElement();
					String is_success = root.elementText("is_success");
					if ("T".equals(is_success)) {
						// 退款成功相应的业务
						resultJson = Utils.GetRetJSONString("0", "退费申请成功！",
								null);
						return "success";
					} else if ("F".equals(is_success)) {
						// 退款失败相应的业务
						resultJson = Utils.GetRetJSONString("1",
								"退款失败：" + root.elementText("error"), null);
						return "success";
					} else {
						resultJson = Utils.GetRetJSONString("1", "支付宝状态返回错误："
								+ is_success, null);
						return "success";
					}
				} else {
					resultJson = Utils.GetRetJSONString("1", "支付宝未返回退款结果！",
							null);
					return "success";
				}
			} catch (DocumentException e) {
				e.printStackTrace();
				resultJson = Utils.GetRetJSONString("1", "退款回复解析错误（XML解析错误）！",
						null);
				return "success";
			}
		} else {
			resultJson = Utils.GetRetJSONString("1", "获取原本支付方式时出错！", null);
			return "success";
		}

	}
	

	public String getOrderFee() {
		return orderFee;
	}

	public void setOrderFee(String orderFee) {
		this.orderFee = orderFee;
	}

	public String getDefrayType() {
		return defrayType;
	}

	public void setDefrayType(String defrayType) {
		this.defrayType = defrayType;
	}

	public String getResultJson() {
		return resultJson;
	}

	public void setResultJson(String resultJson) {
		this.resultJson = resultJson;
	}

	public String getTradeNo() {
		return tradeNo;
	}

	public void setTradeNo(String tradeNo) {
		this.tradeNo = tradeNo;
	}

}
